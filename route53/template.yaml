Description:  CloudFormation Custom Resourses for Route53

Parameters:
  Tag:
    Description: We tag all AWS resources for your convenience.
    Type: String
  Route53AssumeRole:
    Description: (Optional) In case Route53 belongs to another AWS Account
    Type: String

Conditions:
  AssumeRole:
    Fn::Not:
      - Fn::Equals:
        - !Ref Route53AssumeRole
        - ''

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonRoute53ReadOnlyAccess
      Path: /
      Policies:
        Fn::If:
          - AssumeRole
          -
            -
              PolicyName: !Sub ${AWS::StackName}-document
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: !Ref Route53AssumeRole
          - !Ref AWS::NoValue

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Code:
        ZipFile: !Sub |
          'use strict';
          const AWS   = require('aws-sdk');
          const sts = new AWS.STS();
          const https = require("https");
          const url = require("url");

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));
            const { Id } = event.ResourceProperties;

            try {
              const { Credentials } = await sts.assumeRole({
                RoleArn: 'arn:aws:iam::995124376790:role/iam-Route53Role-U0TD38WPWLWM',
                RoleSessionName: 'Lambda',

              }).promise();
              const assumeConfig = new AWS.Config({
                accessKeyId: Credentials.AccessKeyId,
                secretAccessKey: Credentials.AccessKeyId,
                sessionToken : Credentials.SessionToken
              });
              const route53 = new AWS.Route53(assumeConfig);
              const { HostedZone } = await route53.getHostedZone({ Id }).promise();
              await cfnResponse(event, 'SUCCESS', context.logStreamName, 'SUCCESS', { Name: HostedZone.Name.replace(/\.$/, '') });
              return;
            } catch(err) {
              console.error(err);
            }
            await cfnResponse(event, 'FAILED', context.logStreamName, err.message, {});
            return;
          };

          async function cfnResponse (event, responseStatus, PhysicalResourceId, Reason, Data) {
            return new Promise((resolve, reject) => {
              const responseBody = JSON.stringify({
                Status: responseStatus,
                Reason,
                PhysicalResourceId,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                NoEcho: false,
                Data
              });

              const parsedUrl = url.parse(event.ResponseURL);
              const options = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: "PUT",
                headers: {
                  "content-type": "",
                  "content-length": responseBody.length
                }
              };

              const request = https.request(options, (response) => {
                console.log("Status code: " + response.statusCode);
                console.log("Status message: " + response.statusMessage);
                resolve(response);
              });

              request.on('error', (err) => {
                console.log({ err });
                reject(err);
              });

              request.write(responseBody);
              request.end();
            });
          }
      Tags:
        - Key: Name
          Value: !Sub Tag

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Lambda}
      RetentionInDays: 7

Outputs:
  ServiceToken:
    Value: !GetAtt Lambda.Arn

Description:  CloudFormation Custom Reource to help with Amazon WorkSpaces creation

Parameters:
  Tag:
    Description: We tag all AWS resources for your convenience.
    Type: String

Resources:
  'Fn::Transform':
    Name: AWS::Include
    Parameters:
      Location : https://on-aws-us-east-1-master.s3.amazonaws.com/includes/cloudformation/response.yaml

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        -
          PolicyName: !Ref AWS::StackName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # grant the ability to enable Amazon WorkDocs for users within Amazon WorkSpaces
              # https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html
              - # required by EnableWorkSpaces
                Effect: Allow
                Action:
                  - ds:*
                  - workspaces:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:PutRolePolicy
                  - kms:ListAliases
                  - kms:ListKeys
                  - ec2:CreateVpc
                  - ec2:CreateSubnet
                  - ec2:CreateNetworkInterface
                  - ec2:CreateInternetGateway
                  - ec2:CreateRouteTable
                  - ec2:CreateRoute
                  - ec2:CreateTags
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeRouteTables
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeAvailabilityZones
                  - ec2:AttachInternetGateway
                  - ec2:AssociateRouteTable
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteNetworkInterface
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - workdocs:RegisterDirectory
                  - workdocs:DeregisterDirectory
                Resource: '*'

  EnableWorkSpaces:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Code:
        ZipFile: !Sub |
          'use strict';
          const AWS   = require('aws-sdk');
          const workspaces = new AWS.WorkSpaces();
          const lambda = new AWS.Lambda();

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));
            const { DirectoryId, SubnetIds } = event.ResourceProperties;

            try {
              if (event.RequestType === 'Create') {
                await workspaces.registerWorkspaceDirectory({
                  DirectoryId,
                  SubnetIds,
                  EnableWorkDocs: false
                }).promise();

                await waitFor(DirectoryId, 'REGISTERED');
              }
              if (event.RequestType === 'Delete') {
                await workspaces.deregisterWorkspaceDirectory({
                  DirectoryId
                }).promise();
              }
            } catch(err) {
              console.error(err);
              if (err.code !== 'ResourceNotFoundException' || event.RequestType !== 'Delete') {
                await cfnResponse(event, 'FAILED', context.logStreamName, err.message, {});
                return;
              }
            }
            await cfnResponse(event, 'SUCCESS', context.logStreamName, 'SUCCESS', {});
            return;
          };

          async function waitFor(DirectoryId, expected) {
            await new Promise(r => setTimeout(r, 10000));
            const { Directories } = await workspaces.describeWorkspaceDirectories({
              DirectoryIds: [DirectoryId]
            }).promise();
            const state = Directories[0].State;
            console.log({ state });
            if(state === expected)
              return Promise.resolve(state);
            else
              return Promise.reject(state);
          }

          function cfnResponse (event, Status, PhysicalResourceId, Reason, Data) {
            event.Status = Status;
            event.Reason = Reason;
            event.Data = Data;
            event.PhysicalResourceId = PhysicalResourceId;

            return lambda.invoke({
              FunctionName: '${ResponseLambda}',
              Payload: JSON.stringify(event)
            }).promise();
          }
      Tags:
        - Key: App
          Value: !Ref Tag
        - Key: Name
          Value: !Sub ${Tag}/Lambda/EnableWorkSpaces

  EnableWorkSpacesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EnableWorkSpaces}
      RetentionInDays: 7

Outputs:
  EnableWorkSpacesServiceToken:
    Value: !GetAtt EnableWorkSpaces.Arn
